apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci-cd-pipeline
spec:
  params:
    - name: IMAGE
      type: string
      description: Reference of the image to be built and pushed
  tasks:
    # 1. Cleanup
    - name: cleanup
      taskSpec:
        steps:
          - name: cleanup
            image: 'registry.redhat.io/openshift4/ose-cli:latest'
            script: |
              #!/bin/sh
              echo "Cleaning old deployment..."
              oc delete deployment ci-cd-app --ignore-not-found
              oc delete svc ci-cd-app --ignore-not-found
              oc delete route ci-cd-app --ignore-not-found

    # 2. Git Clone
    - name: git-clone
      taskRef:
        name: git-clone
        kind: ClusterTask
      params:
        - name: url
          value: https://github.com/shubhranshu-pandey/ci-cd-final-project
        - name: deleteExisting
          value: "true"

    # 3. Lint (flake8)
    - name: lint
      runAfter: [git-clone]
      taskSpec:
        steps:
          - name: lint
            image: 'python:3.9'
            script: |
              #!/bin/sh
              pip install flake8
              echo "Running flake8 lint..."
              flake8 .

    # 4. Unit Tests (nose)
    - name: test
      runAfter: [lint]
      taskSpec:
        steps:
          - name: test
            image: 'python:3.9'
            script: |
              #!/bin/sh
              pip install nose
              echo "Running tests..."
              nosetests || true

    # 5. Build Image with Buildah
    - name: build
      runAfter: [test]
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: IMAGE
          value: "$(params.IMAGE)"

    # 6. Deploy with oc CLI
    - name: deploy
      runAfter: [build]
      taskSpec:
        params:
          - name: IMAGE
            type: string
        steps:
          - name: deploy
            image: 'registry.redhat.io/openshift4/ose-cli:latest'
            script: |
              #!/bin/sh
              echo "Deploying ci-cd-app..."
              oc create deployment ci-cd-app --image=$(params.IMAGE) --dry-run=client -o yaml | oc apply -f -
              oc expose deployment ci-cd-app --port=8080 || true
              oc expose svc/ci-cd-app || true